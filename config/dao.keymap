/*
 * Copyright (c) 2021 Rafael Yumagulov
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

#define U_MOUSE_MOVE_MAX 1400                     /* New max speed setting (default: 600) */
#undef MOVE_UP
#undef MOVE_DOWN
#undef MOVE_LEFT
#undef MOVE_RIGHT
#define MOVE_UP MOVE_Y(-U_MOUSE_MOVE_MAX)
#define MOVE_DOWN MOVE_Y(U_MOUSE_MOVE_MAX)
#define MOVE_LEFT MOVE_X(-U_MOUSE_MOVE_MAX)
#define MOVE_RIGHT MOVE_X(U_MOUSE_MOVE_MAX)

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

/ {
    chosen {
        zmk,matrix_transform = &default_transform;

        // zmk,matrix_transform = &extra_keys_transform;
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp GRAVE      &kp Q  &kp W  &kp E               &kp R      &kp T            &kp Y                  &kp U      &kp I                    &kp O    &kp P     &kp LBKT
&kp LCTRL      &kp A  &kp S  &kp D               &kp F      &kp G            &kp H                  &kp J      &kp K                    &kp L    &kp SEMI  &mt RCTRL SINGLE_QUOTE
&mt LALT CAPS  &kp Z  &kp X  &kp C               &kp V      &kp B            &kp N                  &kp M      &kp COMMA                &kp DOT  &kp FSLH  &mt LEFT_WIN LG(SPACE)
                             &mt LEFT_SHIFT ESC  &lt 1 TAB  &mt LCTRL SPACE  &mt RIGHT_SHIFT ENTER  &lt 2 DEL  &mt RIGHT_ALT BACKSPACE
            >;
        };

        lower_layer {
            bindings = <
&trans  &kp NUMBER_1  &kp NUMBER_2      &kp NUMBER_3  &kp NUMBER_4  &kp N5         &kp NUMBER_6   &kp NUMBER_7          &kp NUMBER_8           &kp NUMBER_9      &kp NUMBER_0       &trans
&trans  &kp EXCL      &kp AT            &kp HASH      &kp DLLR      &kp PRCNT      &kp CARET      &kp AMPS              &kp STAR               &kp LPAR          &kp RPAR           &kp LS(BACKSLASH)
&trans  &kp SLASH     &kp LS(NUMBER_8)  &kp EQUAL     &kp MINUS     &kp LS(EQUAL)  &kp LS(MINUS)  &kp LS(LEFT_BRACKET)  &kp LS(RIGHT_BRACKET)  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp BACKSLASH
                                        &trans        &trans        &trans         &trans         &mo 3                 &trans
            >;
        };

        raise_layer {
            bindings = <
&trans  &kp C_VOLUME_UP  &msc SCRL_LEFT  &mmv MOVE_UP    &msc SCRL_RIGHT  &msc SCRL_UP     &kp RC(LEFT_ARROW)  &mkp LCLK       &mkp RCLK    &kp LC(RIGHT_ARROW)  &none      &none
&trans  &kp C_VOL_DN     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN   &kp LEFT_ARROW      &kp DOWN_ARROW  &kp UP       &kp RIGHT            &kp INS    &mt RCTRL K_APP
&trans  &none            &none           &none           &none            &none            &kp HOME            &kp PAGE_DOWN   &kp PAGE_UP  &kp END              &mkp MCLK  &trans
                                         &trans          &mo 3            &trans           &trans              &trans          &trans
            >;
        };

        adjust_layer {
            bindings = <
&kp F1      &kp F2        &kp F3        &kp F4        &kp F5        &kp F6        &kp F7        &kp F8        &kp F9        &kp F10       &kp F11       &kp F12
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
&sys_reset  &bootloader   &none         &none         &none         &none         &none         &none         &none         &none         &bootloader   &sys_reset
                                        &trans        &trans        &trans        &trans        &trans        &trans
            >;
        };
    };
};
